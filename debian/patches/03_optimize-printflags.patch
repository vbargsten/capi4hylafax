Package:     capi4hylafax
Subject:     optimize printflags
Author:      Lionel Elie Mamane <lmamane at debian.org>
Forwarded:   no
Last-Update: 2012-06-12

Optimize and fix some printing commands for security reasons.
---

diff -urN s02/src/faxrecv/faxrecv.cpp s03/src/faxrecv/faxrecv.cpp
--- s02/src/faxrecv/faxrecv.cpp	2006-08-15 11:13:33.000000000 +0200
+++ s03/src/faxrecv/faxrecv.cpp	2012-06-12 19:54:35.844950804 +0200
@@ -332,7 +332,7 @@
                 }
 
                 // Hylafax: <qfile> <ModemDeviceID> <CommID> <Reason> <CIDNumber> <CIDName> <destination>
-                executeCommand.PrintAppend (" \"%S\" \"%S\" \"%09u\" \"%s\" \"%S\" \"\" \"%S\"",
+                executeCommand.PrintAppend (" \"%eS\" \"%eS\" \"%09u\" \"%es\" \"%eS\" \"\" \"%eS\"",
                                             GetRecvFiles()->GetFirst(), &FaxDevice->DeviceName, jobNr,
                                             StateText, GetReceiveID(), &MyNumber);
                 WriteXferLog ("RECV", jobNr, 0, 0, (char *)FaxDevice->DeviceName.GetPointer(), 0,
@@ -362,14 +362,14 @@
                 }
 
                 executeCommand.PrintAppend (" %u 0x%X \"", recvStatus, Reason);
-                executeCommand.Append (GetReceiveID());
+                executeCommand.PrintAppend ("%eS", GetReceiveID());
                 executeCommand.Append ("\" \"");
                 if (!MyNumber.IsEmpty()) {
-                    executeCommand.Append (&MyNumber);
+                    executeCommand.PrintAppend ("%eS", &MyNumber);
                 }
                 executeCommand.PrintAppend ("\" %u", GetPageCount());
                 for (COneMultiString *pLauf = GetRecvFiles()->GetFirst(); (pLauf != 0); pLauf = pLauf->GetNext()) {
-                    executeCommand.PrintAppend (" \"%S\"", pLauf);
+                    executeCommand.PrintAppend (" \"%eS\"", pLauf);
                 }
             }
 
diff -urN s02/src/faxrecv/recvdev.cpp s03/src/faxrecv/recvdev.cpp
--- s02/src/faxrecv/recvdev.cpp	2006-08-15 11:13:33.000000000 +0200
+++ s03/src/faxrecv/recvdev.cpp	2012-06-12 19:54:35.848960652 +0200
@@ -114,7 +114,7 @@
     CMultiString   tmpDDIs;
     CMultiString   tmpMSNs;
     CMultiString  *pMSNs;
-    tSize          FindPos;
+    tUInt          FindPos;
 
     ConfigAssignment_Item CntrlAssignments[] = {
         { "Controller",       ConfigAssignment_UInt,       &tmpController },
@@ -162,7 +162,7 @@
                     MSNlauf->RemoveChars ((tChar *)" \t_()[]{}\"'`TtPp,.:;");
                     if (MSNlauf->IsEmpty() == vFalse) {
                         FindPos = MSNlauf->FindChar ('-');
-                        if (FindPos == MAXVAL_tSize) {
+                        if (FindPos == MAXVAL_tUInt) {
                             dprint ("Add MSN-Value=(%s) ", MSNlauf->GetPointer());
                             switch (CIPMSNList.AddMSN (tmpController, MSNlauf)) {
                             case iErr_OutOfMemory:
diff -urN s02/src/faxsend/faxsend.cpp s03/src/faxsend/faxsend.cpp
--- s02/src/faxsend/faxsend.cpp	2006-08-15 11:13:29.000000000 +0200
+++ s03/src/faxsend/faxsend.cpp	2012-06-12 19:54:35.852970513 +0200
@@ -576,7 +576,7 @@
             commStr.Print ("%09u", m_commID);
 
             // Hylafax: <mailaddr> <qfile> <ModemDeviceID> <CommID> <Reason>
-            executeCommand.PrintAppend (" \"%S\" \"%S\" \"%S\" \"%S\" \"%s\"", &PollString,
+            executeCommand.PrintAppend (" \"%eS\" \"%eS\" \"%eS\" \"%eS\" \"%es\"", &PollString,
                                         GetRecvFiles()->GetFirst(), &DeviceName, &commStr, StateText);
         } else  {
             // mgetty:  <RecvStatus> <Hangup Code> "<sender id>" "<poll text>" <nr of pages> <file(s)>
@@ -595,10 +595,10 @@
             case 3:
                 break;
             }
-            executeCommand.PrintAppend (" %u 0x%X \"%S\" \"%S\" %u", recvStatus, Reason, GetReceiveID(),
+            executeCommand.PrintAppend (" %u 0x%X \"%eS\" \"%eS\" %u", recvStatus, Reason, GetReceiveID(),
                                         &PollString, GetPageCount());
             for (COneMultiString *pLauf = GetRecvFiles()->GetFirst(); (pLauf != 0); pLauf = pLauf->GetNext()) {
-                executeCommand.PrintAppend (" \"%s\"", pLauf->GetPointer());
+                executeCommand.PrintAppend (" \"%es\"", pLauf->GetPointer());
             }
         }
 
@@ -671,7 +671,7 @@
                     if (GetSendState() == 2) {
                         WriteLog (LOG_INFO, "Fax file completely transfered to CAPI.\n");
                         exitState = 0;
-                        Disconnect (DisconnectKind_WaitNoPut);
+                        Disconnect (DisconnectKind_Normal);
                     }
                     break;
                 case iErr_File_NotExist:
diff -urN s02/src/faxsend/sendmain.cpp s03/src/faxsend/sendmain.cpp
--- s02/src/faxsend/sendmain.cpp	2006-08-15 11:13:29.000000000 +0200
+++ s03/src/faxsend/sendmain.cpp	2012-06-12 19:54:35.856980361 +0200
@@ -138,7 +138,7 @@
         } else if (strcasecmp ("npages", text) == 0) {
             dprint ("found npages ");
             sprintf (ne + 1, "%u\n", fs->GetPageCount());
-        } else if ((dialortry == 1) && ((strcasecmp ("ndials", text) == 0) || (strcasecmp ("totdials", text) == 0))) {
+        } else if (((dialortry == 1) || (dialortry == 2)) && ((strcasecmp ("ndials", text) == 0) || (strcasecmp ("totdials", text) == 0))) {
             dprint ("found _dials ");
             triescount = atol (ne + 1) + 1;
             if (triescount <= 0) {
diff -urN s02/src/standard/aTypes.h s03/src/standard/aTypes.h
--- s02/src/standard/aTypes.h	2006-08-15 11:13:28.000000000 +0200
+++ s03/src/standard/aTypes.h	2012-06-12 19:54:35.860990222 +0200
@@ -19,6 +19,8 @@
 #ifndef _ATYPES_H_
 #define _ATYPES_H_
 
+#include <limits.h>         // should give __WORDSIZE
+
 /*---------------------------------------------------------------------------*\
 \*---------------------------------------------------------------------------*/
 
diff -urN s02/src/standard/CString.cpp s03/src/standard/CString.cpp
--- s02/src/standard/CString.cpp	2006-08-15 11:13:28.000000000 +0200
+++ s03/src/standard/CString.cpp	2012-06-12 19:54:35.869009930 +0200
@@ -44,6 +44,9 @@
 #define PRINTFLAGS_NEAR             0x0400      // Placeholder is a NEAR-pointer
 #define PRINTFLAGS_QUESTION         0x0800      // Sizeof Char specified before string
 #define PRINTFLAGS_STRINGTYPE       0x1000      // Placeholder is a CDynamicString-Pointer
+#define PRINTFLAGS_SHELLESCAPE      0x2000      // The placeholder should be filled in with
+                                                // a string suitable for passing to /bin/sh
+                                                // between double quotes.
 
 /*===========================================================================*\
 \*===========================================================================*/
@@ -422,6 +425,10 @@
                 PrtFlags |= PRINTFLAGS_SHORT;
                 break;
 
+            case 'e':
+                PrtFlags |= PRINTFLAGS_SHELLESCAPE;
+                break;
+
             /*----- WIDTH or PRECISION-----*/
             case '0':
                 if (PrtPreci == -2) {
@@ -613,21 +620,111 @@
                         PrtWidth = 0;
                     }
                     tUInt endPos = curLen + copyBufLen;
-                    if (endPos >= GetMaxSize()) {
-                        if (DynExpand (endPos + 1) == vFalse) {
+                    const tUInt max_space_needed = endPos + ((PrtFlags & PRINTFLAGS_SHELLESCAPE) ? copyBufLen : 0);
+                    if (max_space_needed >= GetMaxSize()) {
+                        if (DynExpand (max_space_needed + 1) == vFalse) {
                             RETURN ('x', CSTRING_PRINT_MemoryError);
                         }
                     }
-                    dassert (endPos < GetMaxSize());
+                    dassert (max_space_needed < GetMaxSize());
                     dassert (pntr != 0);
-                    if (PrtFlags & PRINTFLAGS_STRINGTYPE) {
-                        s_strncpy (pntr + curLen, (tStringChar *)copyBuf, copyBufLen);
-                    } else if (PrtFlags & PRINTFLAGS_LARGE) {
-                        s_strncpy (pntr + curLen, (tUWiChar *)copyBuf, copyBufLen);
-                    } else if (PrtFlags & PRINTFLAGS_SHORT) {
-                        s_strncpy (pntr + curLen, (tUChar *)copyBuf, copyBufLen);
+                    if (PrtFlags & PRINTFLAGS_SHELLESCAPE) {
+                        const tChar * const c_bs = (tChar*) "\\";
+                        const tChar * const c_0  = (tChar*) "\0";
+                        const tChar * const c_dq = (tChar*) "\"";
+                        const tChar * const c_d  = (tChar*) "$";
+                        const tChar * const c_bq = (tChar*) "`";
+                        const tChar * const c_qm = (tChar*) "?";
+                        // Note that in this case, PrtWidth refers to the string _after_
+                        // interpretation by /bin/sh, i.e. after the escaping is removed.
+                        if (PrtFlags & PRINTFLAGS_STRINGTYPE) {
+                            const tStringChar *p = (tStringChar*)copyBuf;
+                            const tStringChar * const p_end = p + copyBufLen;
+                            for (;p < p_end; ++p) {
+                                if (!s_strncmp(p,c_0,1)) {
+                                    s_strncpy (pntr + curLen, c_qm, 1);
+                                } else {
+                                    if (!(s_strncmp(p,c_dq,1) &&
+                                          s_strncmp(p,c_bs,1) &&
+                                          s_strncmp(p,c_d ,1) &&
+                                          s_strncmp(p,c_bq,1))) {
+                                        s_strncpy (pntr + curLen, c_bs, 1);
+                                        ++curLen;
+                                        ++endPos;
+                                    }
+                                    s_strncpy (pntr + curLen, p, 1);
+                                }
+                                ++curLen;
+                            }
+                        } else if (PrtFlags & PRINTFLAGS_LARGE) {
+                            const tUWiChar *p = (tUWiChar*)copyBuf;
+                            const tUWiChar * const p_end = p + copyBufLen;
+                            for (;p < p_end; ++p) {
+                                if (!s_strncmp(p,c_0,1)) {
+                                    s_strncpy (pntr + curLen, c_qm, 1);
+                                } else {
+                                    if (!(s_strncmp(p,c_dq,1) &&
+                                          s_strncmp(p,c_bs,1) &&
+                                          s_strncmp(p,c_d,1)  &&
+                                          s_strncmp(p,c_bq,1))) {
+                                        s_strncpy (pntr + curLen, c_bs, 1);
+                                        ++curLen;
+                                        ++endPos;
+                                    }
+                                    s_strncpy (pntr + curLen, p, 1);
+                                }
+                                ++curLen;
+                            }
+                        } else if (PrtFlags & PRINTFLAGS_SHORT) {
+                            const tUChar *p = (tUChar*)copyBuf;
+                            const tUChar * const p_end = p + copyBufLen;
+                            for (;p < p_end; ++p) {
+                                if (!s_strncmp(p,c_0,1)) {
+                                    s_strncpy (pntr + curLen, c_qm, 1);
+                                } else {
+                                    if (!(s_strncmp(p,c_dq,1) &&
+                                          s_strncmp(p,c_bs,1) &&
+                                          s_strncmp(p,c_d,1)  &&
+                                          s_strncmp(p,c_bq,1))) {
+                                        s_strncpy (pntr + curLen, c_bs, 1);
+                                        ++curLen;
+                                        ++endPos;
+                                    }
+                                    s_strncpy (pntr + curLen, p, 1);
+                                }
+                                ++curLen;
+                            }
+                        } else {
+                            dassert((sizeof tChar)== (sizeof tFormatChar));
+                            const tChar *p = (tChar*)copyBuf;
+                            const tChar * const p_end = p + copyBufLen;
+                            for (;p < p_end; ++p) {
+                                if (!s_strncmp(p,c_0,1)) {
+                                    s_strncpy (pntr + curLen, c_qm, 1);
+                                } else {
+                                    if (!(s_strncmp(p,c_dq,1) &&
+                                          s_strncmp(p,c_bs,1) &&
+                                          s_strncmp(p,c_d,1)  &&
+                                          s_strncmp(p,c_bq,1))) {
+                                        s_strncpy (pntr + curLen, c_bs, 1);
+                                        ++curLen;
+                                        ++endPos;
+                                    }
+                                    s_strncpy (pntr + curLen, p, 1);
+                                }
+                                ++curLen;
+                            }
+                        }
                     } else {
-                        s_strncpy (pntr + curLen, copyBuf, copyBufLen);
+                        if (PrtFlags & PRINTFLAGS_STRINGTYPE) {
+                            s_strncpy (pntr + curLen, (tStringChar *)copyBuf, copyBufLen);
+                        } else if (PrtFlags & PRINTFLAGS_LARGE) {
+                            s_strncpy (pntr + curLen, (tUWiChar *)copyBuf, copyBufLen);
+                        } else if (PrtFlags & PRINTFLAGS_SHORT) {
+                            s_strncpy (pntr + curLen, (tUChar *)copyBuf, copyBufLen);
+                        } else {
+                            s_strncpy (pntr + curLen, copyBuf, copyBufLen);
+                        }
                     }
                     pntr[endPos] = '\0';
                     curLen       = endPos;
